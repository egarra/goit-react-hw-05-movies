{"version":3,"file":"static/js/561.6cb268c9.chunk.js","mappings":"8SAEAA,EAAAA,EAAAA,SAAAA,QAAyB,gCACzBA,EAAAA,EAAAA,SAAAA,OAAwB,CACtBC,QAAS,oCAGJ,IAAMC,EAAgB,mCAAG,sGACPF,EAAAA,EAAAA,IAAU,oBAAqB,CACpDG,OAAQ,CACNC,KAAM,KAHoB,uBACtBC,EADsB,EACtBA,KADsB,kBAMvBA,GANuB,2CAAH,qDAShBC,EAAe,mCAAG,WAAMC,GAAN,yFACNP,EAAAA,EAAAA,IAAU,gBAAiB,CAChDG,OAAQ,CACNI,MAAAA,KAHyB,uBACrBF,EADqB,EACrBA,KADqB,kBAMtBA,EAAKG,SANiB,2CAAH,sDASfC,EAAY,mCAAG,WAAMC,GAAN,yFACHV,EAAAA,EAAAA,IAAA,iBAAoBU,IADjB,uBAClBL,EADkB,EAClBA,KADkB,kBAEnBA,GAFmB,2CAAH,sDAKZM,EAAY,mCAAG,WAAMD,GAAN,yFACHV,EAAAA,EAAAA,IAAA,iBAAoBU,EAApB,aADG,uBAClBL,EADkB,EAClBA,KADkB,kBAEnBA,EAAKO,MAFc,2CAAH,sDAKZC,EAAc,mCAAG,WAAMH,GAAN,yFACLV,EAAAA,EAAAA,IAAA,iBAAoBU,EAApB,aADK,uBACpBL,EADoB,EACpBA,KADoB,kBAErBA,EAAKG,SAFgB,2CAAH,qD,oKCjCdM,EAAcC,EAAAA,GAAAA,IAAH,2CAIXC,EAAOD,EAAAA,GAAAA,GAAH,6G,SCJJE,EAAW,SAAC,GAAY,IAAXL,EAAU,EAAVA,KAEtB,OACI,SAACI,EAAD,UACKJ,EAAKM,KAAI,YAAmD,IAAjDC,EAAgD,EAAhDA,aAAcC,EAAkC,EAAlCA,UAAWC,EAAuB,EAAvBA,cAAeX,EAAQ,EAARA,GAEhD,OACI,2BACA,SAACI,EAAD,CAAaQ,IAAKH,EAAY,yCAAqCA,GAAiB,oDAAqDI,IAAKF,KAC9I,uBAAIA,KACJ,6BAAKD,EAAL,SAHSV,EAMhB,KAGZ,E,SCmBD,EA7Ba,WACT,OAA0Bc,EAAAA,EAAAA,UAAS,IAAnC,eAAQZ,EAAR,KAAca,EAAd,KACA,GAA4BD,EAAAA,EAAAA,WAAS,GAArC,eAAOE,EAAP,KAAeC,EAAf,KACQjB,GAAOkB,EAAAA,EAAAA,MAAPlB,GAkBR,OAhBAmB,EAAAA,EAAAA,YAAU,WACN,IAAMC,EAAS,mCAAG,2FACdH,GAAU,GADI,mBAGShB,EAAAA,EAAAA,IAAaD,GAHtB,OAGJL,EAHI,OAIVoB,GAAQ,OAAIpB,IAJF,gDAMV0B,QAAQC,IAAR,MANU,yBAQVL,GAAU,GARA,4EAAH,qDAYf,OADAG,IACO,kBAAML,EAAQ,GAAd,CACV,GAAE,CAACf,KAGA,gCACKgB,IAAU,SAACO,EAAA,EAAD,IACVrB,EAAKsB,OAAS,GAAI,SAACjB,EAAD,CAAUL,KAAMA,KAAU,4CAGxD,C","sources":["components/Service/fetchData.js","components/CastList/CastList.styled.js","components/CastList/CastList.jsx","pages/Cast/Cast.jsx"],"sourcesContent":["import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\naxios.defaults.params = {\n  api_key: '158499514fbb39b03ca6770e80a554af',\n};\n\nexport const getTrendingMovie = async () => {\n  const { data } = await axios.get('/trending/all/day', {\n    params: {\n      page: 1,\n    },\n  });\n  return data;\n};\n\nexport const getMovieByQuery = async query => {\n  const { data } = await axios.get('/search/movie', {\n    params: {\n      query,\n    },\n  });\n  return data.results;\n};\n\nexport const getMovieById = async id => {\n  const { data } = await axios.get(`/movie/${id}`)\n  return data;\n}\n\nexport const getMovieCast = async id => {\n  const { data } = await axios.get(`/movie/${id}/credits`)\n  return data.cast;\n}\n\nexport const getMovieReview = async id => {\n  const { data } = await axios.get(`/movie/${id}/reviews`)\n  return data.results;\n}\n","import styled from 'styled-components'\n\nexport const PosterActor = styled.img`\n    width: 100px;\n`\n\nexport const List = styled.ul`\n    padding: 20px;\n    display: flex;\n    flex-direction: column;\n    gap: 15px;\n`\n\n","import { PosterActor, List } from \"./CastList.styled\"\n\nexport const CastList = ({cast}) => {\n\n    return (\n        <List>\n            {cast.map(({profile_path, character, original_name, id}) => {\n    \n                return(\n                    <li key={id}>\n                    <PosterActor src={profile_path ? `https://image.tmdb.org/t/p/w500${profile_path}` : 'https://via.placeholder.com/700?text=NoImageFound'} alt={original_name}/>\n                    <p>{original_name}</p>\n                    <p>\"{character}\"</p>\n                </li>\n                )\n            })}\n        </List>\n    )\n}","import { useParams } from \"react-router-dom\";\n\nimport { getMovieCast } from '../../components/Service/fetchData'\nimport { useEffect, useState } from \"react\";\n\nimport { CastList } from \"components/CastList/CastList\";\nimport { Loader } from 'components/Loader/Loader';\n\nconst Cast = () => {\n    const [ cast, setCast ] = useState([]);\n    const [loader, setLoader] = useState(false);\n    const { id } = useParams();\n\n    useEffect(() => {\n        const fetchCast = async () => {\n            setLoader(true)\n            try {\n                const data = await getMovieCast(id);\n                setCast([...data])\n            } catch (error) {\n                console.log(error)\n            } finally {\n                setLoader(false)\n            }\n        }\n        fetchCast()\n        return () => setCast([])\n    }, [id])\n    \n    return (\n        <>\n            {loader && <Loader />}\n            {cast.length > 0 ? <CastList cast={cast}/> : <p>No information</p>}\n        </>\n    )\n}\n\nexport default Cast;"],"names":["axios","api_key","getTrendingMovie","params","page","data","getMovieByQuery","query","results","getMovieById","id","getMovieCast","cast","getMovieReview","PosterActor","styled","List","CastList","map","profile_path","character","original_name","src","alt","useState","setCast","loader","setLoader","useParams","useEffect","fetchCast","console","log","Loader","length"],"sourceRoot":""}